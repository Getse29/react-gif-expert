{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategorie","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","console","log","getGif","category","a","URL","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","url","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GGifExpertApp","categories","ReactDOM","render","GifExpertApp","document","getElementById"],"mappings":"2MAKaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAmBjD,OACE,sBAAMC,SAXa,SAAAC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,OACvBG,QAAQC,IAAI,gB,+BCXHC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAMF,GAFJ,cAEdG,EAFc,gBAGGA,EAAIC,OAHP,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAG,UAAEA,EAAIG,cAAN,aAAE,EAAYC,iBAAiBC,QATlB,kBAYbP,GAZa,4CAAH,sDCENQ,EAAc,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOF,EAAU,EAAVA,IAEnC,OACE,sBAAKO,UAAU,4CAAf,UACE,qBAAKC,IAAKR,EAAKS,IAAKP,IACpB,4BAAIA,QCHGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEdhB,mBAAS,CACjCuB,KAAM,GACNc,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACRzB,EAAOC,GACJyB,MAAK,SAAAC,GACJH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGd,CAACrB,IAEGsB,EDd2BK,CAAa3B,GAAjCa,EAFyB,EAE/BN,KAAcc,EAFiB,EAEjBA,QAEtB,OACE,qCACE,6BAAKrB,IAEJqB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEIJ,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEWRiB,EAzBO,WAAO,IAAD,EAEU5C,mBAAS,CAAC,kBAFpB,mBAEnB6C,EAFmB,KAEP9C,EAFO,KAI1B,OACE,qCACE,gDACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEA,6BAEI8C,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCbnB8B,IAASC,OACP,cAACC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aad34c7b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategorie = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    setInputValue(e.target.value)\r\n    console.log('object')\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 1) {\r\n      setCategories(cats => [inputValue, ...cats])\r\n      setInputValue('');\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategorie.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}","export const getGif = async (category) => {\r\n  const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=sY62oWNtth0WE6Im4mgWAYOcUghCAk1m`;\r\n  const res = await fetch(URL);\r\n  const { data } = await res.json();\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      img: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, img }) => {\r\n  /* const { id, title, image } = img */\r\n  return (\r\n    <div className=\"card animate__animated animate__slideInUp\">\r\n      <img src={img} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {loading && <p>Loading</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(img => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGif(category)\r\n      .then(imgs => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        });\r\n      })\r\n  }, [category])\r\n\r\n  return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategorie } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GGifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One Punch Man']);\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategorie setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n            <GifGrid\r\n              key={category}\r\n              category={category}\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GGifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n/*\n\n*/"],"sourceRoot":""}